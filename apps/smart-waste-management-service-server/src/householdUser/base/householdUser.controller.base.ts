/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HouseholdUserService } from "../householdUser.service";
import { HouseholdUserCreateInput } from "./HouseholdUserCreateInput";
import { HouseholdUser } from "./HouseholdUser";
import { HouseholdUserFindManyArgs } from "./HouseholdUserFindManyArgs";
import { HouseholdUserWhereUniqueInput } from "./HouseholdUserWhereUniqueInput";
import { HouseholdUserUpdateInput } from "./HouseholdUserUpdateInput";

export class HouseholdUserControllerBase {
  constructor(protected readonly service: HouseholdUserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HouseholdUser })
  async createHouseholdUser(
    @common.Body() data: HouseholdUserCreateInput
  ): Promise<HouseholdUser> {
    return await this.service.createHouseholdUser({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [HouseholdUser] })
  @ApiNestedQuery(HouseholdUserFindManyArgs)
  async householdUsers(
    @common.Req() request: Request
  ): Promise<HouseholdUser[]> {
    const args = plainToClass(HouseholdUserFindManyArgs, request.query);
    return this.service.householdUsers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HouseholdUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async householdUser(
    @common.Param() params: HouseholdUserWhereUniqueInput
  ): Promise<HouseholdUser | null> {
    const result = await this.service.householdUser({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HouseholdUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHouseholdUser(
    @common.Param() params: HouseholdUserWhereUniqueInput,
    @common.Body() data: HouseholdUserUpdateInput
  ): Promise<HouseholdUser | null> {
    try {
      return await this.service.updateHouseholdUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HouseholdUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHouseholdUser(
    @common.Param() params: HouseholdUserWhereUniqueInput
  ): Promise<HouseholdUser | null> {
    try {
      return await this.service.deleteHouseholdUser({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
