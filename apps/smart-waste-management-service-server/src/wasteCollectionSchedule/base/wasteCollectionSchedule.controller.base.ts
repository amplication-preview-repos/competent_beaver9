/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WasteCollectionScheduleService } from "../wasteCollectionSchedule.service";
import { WasteCollectionScheduleCreateInput } from "./WasteCollectionScheduleCreateInput";
import { WasteCollectionSchedule } from "./WasteCollectionSchedule";
import { WasteCollectionScheduleFindManyArgs } from "./WasteCollectionScheduleFindManyArgs";
import { WasteCollectionScheduleWhereUniqueInput } from "./WasteCollectionScheduleWhereUniqueInput";
import { WasteCollectionScheduleUpdateInput } from "./WasteCollectionScheduleUpdateInput";

export class WasteCollectionScheduleControllerBase {
  constructor(protected readonly service: WasteCollectionScheduleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WasteCollectionSchedule })
  async createWasteCollectionSchedule(
    @common.Body() data: WasteCollectionScheduleCreateInput
  ): Promise<WasteCollectionSchedule> {
    return await this.service.createWasteCollectionSchedule({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WasteCollectionSchedule] })
  @ApiNestedQuery(WasteCollectionScheduleFindManyArgs)
  async wasteCollectionSchedules(
    @common.Req() request: Request
  ): Promise<WasteCollectionSchedule[]> {
    const args = plainToClass(
      WasteCollectionScheduleFindManyArgs,
      request.query
    );
    return this.service.wasteCollectionSchedules({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WasteCollectionSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async wasteCollectionSchedule(
    @common.Param() params: WasteCollectionScheduleWhereUniqueInput
  ): Promise<WasteCollectionSchedule | null> {
    const result = await this.service.wasteCollectionSchedule({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WasteCollectionSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWasteCollectionSchedule(
    @common.Param() params: WasteCollectionScheduleWhereUniqueInput,
    @common.Body() data: WasteCollectionScheduleUpdateInput
  ): Promise<WasteCollectionSchedule | null> {
    try {
      return await this.service.updateWasteCollectionSchedule({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WasteCollectionSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWasteCollectionSchedule(
    @common.Param() params: WasteCollectionScheduleWhereUniqueInput
  ): Promise<WasteCollectionSchedule | null> {
    try {
      return await this.service.deleteWasteCollectionSchedule({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
