/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecyclingTrackerService } from "../recyclingTracker.service";
import { RecyclingTrackerCreateInput } from "./RecyclingTrackerCreateInput";
import { RecyclingTracker } from "./RecyclingTracker";
import { RecyclingTrackerFindManyArgs } from "./RecyclingTrackerFindManyArgs";
import { RecyclingTrackerWhereUniqueInput } from "./RecyclingTrackerWhereUniqueInput";
import { RecyclingTrackerUpdateInput } from "./RecyclingTrackerUpdateInput";

export class RecyclingTrackerControllerBase {
  constructor(protected readonly service: RecyclingTrackerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RecyclingTracker })
  async createRecyclingTracker(
    @common.Body() data: RecyclingTrackerCreateInput
  ): Promise<RecyclingTracker> {
    return await this.service.createRecyclingTracker({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RecyclingTracker] })
  @ApiNestedQuery(RecyclingTrackerFindManyArgs)
  async recyclingTrackers(
    @common.Req() request: Request
  ): Promise<RecyclingTracker[]> {
    const args = plainToClass(RecyclingTrackerFindManyArgs, request.query);
    return this.service.recyclingTrackers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RecyclingTracker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recyclingTracker(
    @common.Param() params: RecyclingTrackerWhereUniqueInput
  ): Promise<RecyclingTracker | null> {
    const result = await this.service.recyclingTracker({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RecyclingTracker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecyclingTracker(
    @common.Param() params: RecyclingTrackerWhereUniqueInput,
    @common.Body() data: RecyclingTrackerUpdateInput
  ): Promise<RecyclingTracker | null> {
    try {
      return await this.service.updateRecyclingTracker({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RecyclingTracker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecyclingTracker(
    @common.Param() params: RecyclingTrackerWhereUniqueInput
  ): Promise<RecyclingTracker | null> {
    try {
      return await this.service.deleteRecyclingTracker({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
