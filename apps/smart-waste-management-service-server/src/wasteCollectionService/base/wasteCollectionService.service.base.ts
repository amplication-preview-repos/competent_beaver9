/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  WasteCollectionService as PrismaWasteCollectionService,
} from "@prisma/client";

export class WasteCollectionServiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WasteCollectionServiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wasteCollectionService.count(args);
  }

  async wasteCollectionServices(
    args: Prisma.WasteCollectionServiceFindManyArgs
  ): Promise<PrismaWasteCollectionService[]> {
    return this.prisma.wasteCollectionService.findMany(args);
  }
  async wasteCollectionService(
    args: Prisma.WasteCollectionServiceFindUniqueArgs
  ): Promise<PrismaWasteCollectionService | null> {
    return this.prisma.wasteCollectionService.findUnique(args);
  }
  async createWasteCollectionService(
    args: Prisma.WasteCollectionServiceCreateArgs
  ): Promise<PrismaWasteCollectionService> {
    return this.prisma.wasteCollectionService.create(args);
  }
  async updateWasteCollectionService(
    args: Prisma.WasteCollectionServiceUpdateArgs
  ): Promise<PrismaWasteCollectionService> {
    return this.prisma.wasteCollectionService.update(args);
  }
  async deleteWasteCollectionService(
    args: Prisma.WasteCollectionServiceDeleteArgs
  ): Promise<PrismaWasteCollectionService> {
    return this.prisma.wasteCollectionService.delete(args);
  }
}
