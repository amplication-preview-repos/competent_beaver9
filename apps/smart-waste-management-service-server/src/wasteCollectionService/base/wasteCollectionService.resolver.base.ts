/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WasteCollectionService } from "./WasteCollectionService";
import { WasteCollectionServiceCountArgs } from "./WasteCollectionServiceCountArgs";
import { WasteCollectionServiceFindManyArgs } from "./WasteCollectionServiceFindManyArgs";
import { WasteCollectionServiceFindUniqueArgs } from "./WasteCollectionServiceFindUniqueArgs";
import { DeleteWasteCollectionServiceArgs } from "./DeleteWasteCollectionServiceArgs";
import { WasteCollectionServiceService } from "../wasteCollectionService.service";
@graphql.Resolver(() => WasteCollectionService)
export class WasteCollectionServiceResolverBase {
  constructor(protected readonly service: WasteCollectionServiceService) {}

  async _wasteCollectionServicesMeta(
    @graphql.Args() args: WasteCollectionServiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WasteCollectionService])
  async wasteCollectionServices(
    @graphql.Args() args: WasteCollectionServiceFindManyArgs
  ): Promise<WasteCollectionService[]> {
    return this.service.wasteCollectionServices(args);
  }

  @graphql.Query(() => WasteCollectionService, { nullable: true })
  async wasteCollectionService(
    @graphql.Args() args: WasteCollectionServiceFindUniqueArgs
  ): Promise<WasteCollectionService | null> {
    const result = await this.service.wasteCollectionService(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WasteCollectionService)
  async deleteWasteCollectionService(
    @graphql.Args() args: DeleteWasteCollectionServiceArgs
  ): Promise<WasteCollectionService | null> {
    try {
      return await this.service.deleteWasteCollectionService(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
