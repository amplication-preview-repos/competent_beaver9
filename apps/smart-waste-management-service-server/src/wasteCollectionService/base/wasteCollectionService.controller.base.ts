/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WasteCollectionServiceService } from "../wasteCollectionService.service";
import { WasteCollectionServiceCreateInput } from "./WasteCollectionServiceCreateInput";
import { WasteCollectionService } from "./WasteCollectionService";
import { WasteCollectionServiceFindManyArgs } from "./WasteCollectionServiceFindManyArgs";
import { WasteCollectionServiceWhereUniqueInput } from "./WasteCollectionServiceWhereUniqueInput";
import { WasteCollectionServiceUpdateInput } from "./WasteCollectionServiceUpdateInput";

export class WasteCollectionServiceControllerBase {
  constructor(protected readonly service: WasteCollectionServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WasteCollectionService })
  async createWasteCollectionService(
    @common.Body() data: WasteCollectionServiceCreateInput
  ): Promise<WasteCollectionService> {
    return await this.service.createWasteCollectionService({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WasteCollectionService] })
  @ApiNestedQuery(WasteCollectionServiceFindManyArgs)
  async wasteCollectionServices(
    @common.Req() request: Request
  ): Promise<WasteCollectionService[]> {
    const args = plainToClass(
      WasteCollectionServiceFindManyArgs,
      request.query
    );
    return this.service.wasteCollectionServices({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WasteCollectionService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async wasteCollectionService(
    @common.Param() params: WasteCollectionServiceWhereUniqueInput
  ): Promise<WasteCollectionService | null> {
    const result = await this.service.wasteCollectionService({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WasteCollectionService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWasteCollectionService(
    @common.Param() params: WasteCollectionServiceWhereUniqueInput,
    @common.Body() data: WasteCollectionServiceUpdateInput
  ): Promise<WasteCollectionService | null> {
    try {
      return await this.service.updateWasteCollectionService({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WasteCollectionService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWasteCollectionService(
    @common.Param() params: WasteCollectionServiceWhereUniqueInput
  ): Promise<WasteCollectionService | null> {
    try {
      return await this.service.deleteWasteCollectionService({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
